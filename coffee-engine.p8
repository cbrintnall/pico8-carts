pico-8 cartridge // http://www.pico-8.com
version 41
__lua__
debug=true
actors = {}
x_speed = 1.0
x_stretch = 15.0
skin_colors={2,15,4}
cloth_colors={8,12,14,9}
bottom_start_color=10
top_start_color=11
skin_start_color=1
dbg = {}
actor_init = {}
active_chunks = {0,1,2}
machines = {}
player_count=0

function create_actor(sprite_index, vec)
	local data = {
		draw  				= draw_act,
		update				= update_act,
		spr_idx 		= sprite_index,
		flipped 		= false,
		collision = band(fget(sprite_index, 4), 10) == 10,
		x									= 0,
		y									= 0,
		aabb						= {x=0,y=0,w=7,h=7},
		layer					= 0
	}
	
	add(actors,data)
	
	return data
end

function _init()
	actor_init = {
		[0]=create_actor,
		[1]=create_actor,
		[2]=create_player,
		[8]=create_machine
	}
	_set_fps(60)
	
	if not debug then
		--- set resolution to 64x64
		poke(0x5f2c,3)
	end
	
	for chunk in all(active_chunks) do
		initialize_map(chunk, 0)
	end

	camera(0,8)
	create_player(2)
end

function initialize_map(chunk, layer)
	local actor_layer = layer or 0
	-- limit to 8 on each axis
	for x=0,7 do
		for y=0,7 do
			local mx=(x)+(chunk*8)
			local spr_idx = mget(mx,y)
			if spr_idx != 0 then
				for k,init in pairs(actor_init) do
					if band(fget(spr_idx), k) == k then
						local act = init(spr_idx, {x=x,y=y})
						act.x = x*8
						act.y = y*8
						act.layer = actor_layer
					end
				end
			end
		end
	end
end

function create_machine(spr_idx, vec)
	local machine = create_actor(spr_idx, vec)
	local is_pump = fget(spr_idx, 4)
	local is_hold = not is_pump
	
	-- cooldown in seconds
	machine.active = true
	machine.cooldown = 0.5
	machine.progress = 0.0
	machine.start_at = 0.0
	machine.is_pump = fget(spr_idx,4)
	machine.is_forget = fget(spr_idx,5)
	machine.interact_long = function(self)
	end
	
	machine.interact_short = interact_short
	machine.update = update_machine	
	machine.draw = draw_machine

	if machines[vec.x] == nil then
		machines[vec.x] = {}
	end

	machines[vec.x][vec.y]=machine
	
	return machine
end

function interact_short(self)
	if self.progress >= 1.0 then
		print("yay done!")
		stop()
	else
		if not self.active and self.is_pump then
			self.active = true
			self.start_at = time()
		end
	end
end

function update_machine(machine)
	update_act(machine)
	
	if machine.is_active then
		if machine.is_pump and machine.is_forget then
			machine.progress = mid(0.0, time() - machine.start_at, 1.0)
			if machine.progress >= 1.0 then
				machine.active = false
			end
		else 
			if machine.is_pump and machine.is_forget then
				machine.progress = mid(0.0, progress + 0.25, 1.0)
				machine.active = false
			end
		end
	end
end

function draw_machine(machine)
end

function create_player(spr_idx, coords)
	local player = create_actor(spr_idx)	
	player.update = update_player 
	player.draw = draw_player
	player.aabb = {x=2,y=4,w=5,h=7} 
	player.layer = 999
	player.last_dir = {x=0,y=0}
	player.target = {x=0,y=0,w=0,h=0}
	player.x = 16
	player.y = 45
	return player
end

function draw_player(player)
	draw_act(player)
	
	rect(
		player.target.x,
		player.target.y,
		player.target.w,
		player.target.h
	)
end

function get_machine_at(vec)
	local t = {x=vec.x/8,y=vec.y/8}
	if machines[t.x] then
		return machines[t.x][t.y]
	end
	return nil
end

function update_player(player)
	-- run through normal update
	update_act(player)

	local dx = player.x
	local dy = player.y
	local mv = {x=0, y=0}

	if (btn(➡️)) mv.x += 1
	if (btn(⬅️)) mv.x -= 1
	if (btn(⬆️)) mv.y -= 1
	if (btn(⬇️)) mv.y += 1
	
	try_move(player, mv.x, mv.y)
	
	dx -= player.x
	dy -= player.y

	if mv.x != 0 or mv.y != 0 then
		player.last_dir = mv
		local xs = flr(
			(player.x+player.aabb.x)/8)
				*8 + (player.last_dir.x*8)
			
		local xe = flr(
			(player.y+player.aabb.y)/8)
				*8 + (player.last_dir.y*8)
				
		player.target = {
			x=flr(xs/8)*8,
			y=flr(xe/8)*8,
			w=flr((xs+8)/8)*8,
			h=flr((xe+8)/8)*8, 
		}		
	end
	
	if debug then
		local sprs = get_sprites_at({
			x=player.target.x/8,
			y=player.target.y/8
		})
		add(dbg,sprs)
		add(dbg,"targ: {" .. player.target.x/8 .. "," .. player.target.y/8 .. "}")
		local machine = get_machine_at(player.target)
		if machine != nil then
			add(dbg, tostring(machine.is_active))
		end
	end
	
	if btn(5) then
		local machine = get_machine_at(player.target)
		if machine != nil then
			machine:interact_long()
		end
	end
	
	if btnp(5) then
		local machine = get_machine_at(player.target)
		
		if machine != nil then
			machine:interact_short()
		end
	end
	
	if dx != 0 then
		player.flipped = dx > 0
	end
	
	add(dbg, machines)
end

function try_move(actor, dx, dy)
	local x = actor.x
	local y = actor.y
	
	actor.x += dx
	actor.y += dy
	
	local cdata = get_collision(actor)

	-- each dir just captures all sides, so we only check up
	if cdata.up or cdata.down then
		actor.y -= dy
	end

	if cdata.right or cdata.left then
		actor.x -= dx
	end

	for k,v in pairs(cdata) do
		add(dbg, k .. ":" .. tostring(v))
	end
end

function update_act(t)
end

function get_collision(t)
	local x1 = (t.x+t.aabb.x)/8
	local y1 = (t.y+t.aabb.y)/8
	local x2 = (t.x+t.aabb.w)/8
	local y2 = (t.y+t.aabb.h)/8
	local a= collider_at(x1,y1)
 local b=	collider_at(x1,y2)
 local c= collider_at(x2,y2)
 local d=	collider_at(x2,y1)
 return {
 	up			=a	or d,
 	left	=a or b,
 	down	=b or c,
 	right=d or c
 }

end

function get_sprites_at(vec)
	local sprites = {}
	for c in all(active_chunks) do
		local spr_idx = mget(vec.x+(c*8),vec.y)
		if spr_idx > 0 then
			add(sprites, spr_idx)
		end
	end
	
	return sprites
end

function collider_at(vx,vy)
	local sprites = get_sprites_at({x=vx,y=vy})
	for sprite in all(sprites) do
		if fget(sprite,4) then
			return true
		end
	end	
	return false
end

function draw_act(t)
	spr(t.spr_idx,t.x,t.y, 1, 1, t.flipped)

	-- draw aabb for debugging
	if debug then
		--[[
		rect(
			t.x+t.aabb.x,
			t.y+t.aabb.y,
			t.x+t.aabb.w,
			t.y+t.aabb.h,
			14
		)
		]]
	end
end

function isorty(t) --insertion sort, ascending y
	for n=2,#t do
 	local i=n
  while i>1 and (t[i].layer)<(t[i-1].layer) do
  	t[i],t[i-1]=t[i-1],t[i]
   i-=1
		end
	end
end

function _update()
	-- y-sort for draw order
	isorty(actors)

	for x=1,#actors do
		actors[x].update(actors[x])
	end
end

function _draw()
	cls()
	for x=1,#actors do
		actors[x].draw(actors[x])
	end
	if debug then
		for x=1,#dbg do
			print(tostring(dbg[x]),0,(x-1)*8, 7)
		end
	end
	
	dbg = {}
end

function tostring(obj) 
	local output = ""
	if type(obj) == "table" then
		output = output .. "{"
		for k,v in pairs(obj) do
			output = output .. k .. ":" .. tostring(v) .. ","
		end
		output = output .. "}"
	elseif type(obj) == "boolean" then
		if obj then
			output = output .. "true"
		else
			output = output .. "false"
		end
	elseif obj == nil then
		output = output .. "nil"
	elseif type(obj) != "function" then
		output = output .. obj
	end
	
	return output
end
__gfx__
000000000000000000888000444440009999999a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000888880041ff10009d1111da000b300000666600000000000000000000000000000000000000000000000000000000000000000000000000
0070070000000000088888004ffff00091d11d1a0bb3333000666600000000000000000000000000000000000000000000000000000000000000000000000000
000770000011110002f1f10048880000911dd11a0b33333000666600000000000000000000000000000000000000000000000000000000000000000000000000
000770000111111002ffff0088880000911dd11ab333333000666600000000000000000000000000000000000000000000000000000000000000000000000000
00700700011111d0223333006006000091d11d1a0333233000666600000000000000000000000000000000000000000000000000000000000000000000000000
000000000111111000333300000000009d1111da0332400000111100000000000000000000000000000000000000000000000000000000000000000000000000
000000000111111000d00d00000000009aaaaaaa0004400001111110000000000000000000000000000000000000000000000000000000000000000000000000
000000000b6bbb1000d00d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000b1bbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000b1bbbb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000a1aaaa00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000001aaa000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9ffffff9222222220000002222000000444144440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9ffffff9eeeeeeee0000002222000000444144440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9ffffff9eeeeeeee0000002222000000144144440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9ffffff9eeeeeeee0000002222000000144144440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
9ffffff9eeeeeeee0000002222000000144444440444444000000000000000000000000000000000000000000000000000000000000000000000000000000000
9ffffff9eeeeeeee00000022220000001444441404cccc4000000000000000009999999900000000000000000000000000000000000000000000000000000000
9ffffff9eeeeeeee00000022220000001444441404cccc4000011000000000009ffffff900000000000000000000000000000000000000000000000000000000
9ffffff9eeeeeeee0000002222000000144444140444444000100100000000009ffffff900000000000000000000000000000000000000000000000000000000
9ffffff9eeeeeeee00000022220000004144441404cccc4004444440000000000000000000000000000000000000000000000000000000000000000000000000
9ffffff9eeeeeeee00000022220000004144441404cccc4004cc7c40000000000000000000000000000000000000000000000000000000000000000000000000
99999999eeeeeeee00000022220000004144441404cc7c4004cddd40000000000000000000000000000000000000000000000000000000000000000000000000
01111110eeeeeeee0000002222000000414144140444444004444440222222220000000000000000000000000000000000000000000000000000000000000000
02222220eeeeeeee000000222200000041414414000000000000000027c777a20000000000000000000000000000000000000000000000000000000000000000
022222207777777700000022220000004141444400000000000000002ccccaa20000000000000000000000000000000000000000000000000000000000000000
022222207f7ff7f700000022220000004441444400000000000000002bbbbbb20000000000000000000000000000000000000000000000000000000000000000
02222220777777770000002222000000444144440000000000000000222222220000000000000000000000000000000000000000000000000000000000000000
__gff__
0000120011003800000000000000000000000000000000000000000000000000110010100000000011000000000000001111101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2221212121212123002500003700250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3231313131313133003500360000350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3234243434343433000000000028000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3224343434243433000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3224243434343433000000000020000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3234243424342433000000000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3234343434343433000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3224343424242433000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0404040404040404000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
0001000004060040600406004010040100501005010050100b6100b6100b6000b6000b6000b6000b6000b6000b6000b6000b6000b6000b6000b6000b6000b6000b6000b600007000170001700017000070000700
060300000361005620076200a6300d64011640166401b65020660266702967012070140701607018070190701907018070170701607014070130701007011260145601b650196501664014630116300e6100b600
